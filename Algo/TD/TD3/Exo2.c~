#include<stdio.h>
#include<stdlib.h>
#define N 10


/*Ligne avec pixel*/
struct maillon_ligne
{
	int pix;
	struct maillon_ligne * suivant;
};
typedef struct maillon_ligne * ligne;



/*Image = tableau de ligne */
typedef ligne T_image[N];



/*Ligne compressee*/
struct couple
{
	int val, nb;
};

struct maillon_ligne_compressee
{
	struct couple pix;
	struct maillon_ligne_compressee * suivant;
};
typedef struct maillon_ligne_compressee * ligne_compressee;

/*Image compressee = tableau de ligne compressee*/
typedef ligne_compressee T_image_compressee[N];



/*Ajoute en tete d'une ligne*/
void ajout (ligne *l, int val)
{
	ligne l2;
	
	l2=(ligne)malloc(sizeof(struct maillon_ligne));
	l2->pix = val;
	l2->suivant = *l;
	*l = l2;
}


/*Ajoute en tete d'une ligne compressee*/
void ajoutC (ligne_compressee *lc, struct couple c)
{
	ligne_compressee lc2=NULL;

	lc2=(ligne_compressee)malloc(sizeof(struct maillon_ligne_compressee));
	lc2->pix=c;
	lc2->suivant = *lc;
	*lc = lc2;
}

/*Affiche une ligne compressee*/
void affiche_ligneC (ligne_compressee l)
{

	printf("Ligne compressee : ");
	while(l!=NULL)
	{
		printf("(%d,%d)",l->pix.val,l->pix.nb);
		l=l->suivant;
	}

	printf("\n");
}


/*Affiche une ligne*/
void affiche_ligne (ligne l)
{
	while(l!=NULL)
	{
		printf("%d ",l->pix);
		l=l->suivant;
	}

	printf("\n");
}


/*Affiche une image*/
void affiche_image (T_image image)
{
	int i;

	for(i=0; i<N; i++)
	{
		affiche_ligne (image[i]);
	}
}

/*Affiche une image compressee*/
void affiche_image_compressee (T_image_compressee imageC)
{
	int i;

	for(i=0; i<N; i++)
	{
		affiche_ligneC (imageC[i]);
	}
}

/*Compression d'une ligne 
dans un ligne compressee 
passée en paramètre*/
void compresse_ligne (ligne l, ligne_compressee *lc)
{
	struct couple c;

	while(l!= NULL)
	{
		c.val=l->pix;
		c.nb=1;
		l=l->suivant;


		while((l!=NULL)&&(l->pix == c.val))
		{
			c.nb++;
			l=l->suivant;
		}
		ajoutC(lc,c);		
	}
}

//Compression d'une image
void compresse_image (T_image i, T_image_compressee *ic)
{
	int j;
	ligne_compressee lc=NULL;

	for(j=0;j<N;j++)
	{
		compresse_ligne (i[j], &lc);
		(*ic)[j] = lc;
		lc = NULL;
	}
	
}

//Décompression d'une ligne
void decompresse_ligne (ligne_compressee lc, ligne *l)
{
	int i;

	while (lc != NULL)
	{
		i=lc->pix.nb;

		while (i > 0)
		{
			ajout (l,lc->pix.val);
			i--;
		}
	lc = lc->suivant;
	}
}

//Décompressiond'une image
void decompresse_image (T_image_compressee ic, T_image *i)
{
	int x;
	ligne l = NULL;

	for (x=0;x<N;x++)
	{
		decompresse_ligne (ic[x], &l);
		(*i)[x]=l;
		l =NULL;
	}
}


/*Programme Principal*/
int main()
{
	ligne l1=NULL,l2=NULL,l3=NULL,l4=NULL,l5=NULL;
	ligne l6=NULL,l7=NULL,l8=NULL,l9=NULL,l10=NULL;


	//ligne_compressee lc=NULL;
	
	ajout (&l1,4);ajout (&l1,4);ajout (&l1,3);ajout (&l1,3);
	ajout (&l2,5);ajout (&l2,5);ajout (&l2,5);ajout (&l2,5);
	ajout (&l3,5);ajout (&l3,6);ajout (&l3,5);ajout (&l3,6);

	ajout (&l4,4);ajout (&l4,4);ajout (&l4,3);ajout (&l4,3);
	ajout (&l5,5);ajout (&l5,5);ajout (&l5,5);ajout (&l5,5);
	ajout (&l6,5);ajout (&l6,5);ajout (&l6,6);ajout (&l6,6);

	ajout (&l7,4);ajout (&l7,4);ajout (&l7,3);ajout (&l7,3);
	ajout (&l8,5);ajout (&l8,5);ajout (&l8,1);ajout (&l8,9);
	ajout (&l9,5);ajout (&l9,5);ajout (&l9,6);ajout (&l9,6);

	ajout (&l10,9);ajout (&l10,9);ajout (&l10,9);ajout (&l10,9);

	T_image tab={l1,l2,l3,l4,l5,l6,l7,l8,l9,l10};
	T_image_compressee tabC;

	printf("L'image :\n");
	
	affiche_image(tab);

	compresse_image (tab, &tabC);
	
	printf("L'image compressee correspondante :\n");	
	
	affiche_image_compressee(tabC);

	decompresse_image (tabC, &tab);

	affiche_image (tab);

	//affiche_ligne (l1);

	//compresse_ligne(l1,&lc);

	//affiche_ligneC (lc);
	

return 0;
}
